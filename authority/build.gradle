import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
   repositories {
      jcenter()
      mavenCentral()
   }

   ext {
      springBootVersion = '2.1.6.RELEASE'
      lombokVersion = '1.18.8'
      dubboVersion = '2.7.4.1'
      dubboCuratorVersion = '2.13.0'
      mybatisVersion = '2.0.1'
      swaggerVersion = "2.9.2"
      isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
   }
}

plugins {
   id 'org.springframework.boot' version '2.1.6.RELEASE'
   id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'org.angboot.authority'
version = '0.2.0-SNAPSHOT'

sourceCompatibility = '1.8'

configurations {
   developmentOnly
   internalApi
   compile.extendsFrom(internalApi)
   compileOnly.extendsFrom(tools, annotationProcessor)
}

repositories {
   maven {
      url 'http://javafamily.club:8081/repository/maven-public/'
      content {
         // put internal and custom artifacts here that aren't available in public repositories
         includeGroup 'org.angboot'
      }
   }

   maven {
      url 'http://maven.aliyun.com/nexus/content/groups/public/'
   }

   jcenter()
   mavenCentral()
}

dependencies {
   // internal api
   internalApi "org.angboot:models:${project.version}"
   internalApi "org.angboot:constants:${project.version}"
   internalApi "org.angboot:interfaces:${project.version}"

   // spring
   implementation 'org.springframework.boot:spring-boot-starter-web'
   implementation 'org.springframework.boot:spring-boot-starter-cache'

   // only development
   developmentOnly 'org.springframework.boot:spring-boot-devtools'
   annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

   // mybatis
   implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}"

   // dubbo
   implementation "org.apache.dubbo:dubbo-spring-boot-starter:${dubboVersion}"
   implementation "org.apache.curator:curator-recipes:${dubboCuratorVersion}"

   // database
   runtimeOnly 'com.h2database:h2'
   implementation 'com.alibaba:druid:1.1.18'

   testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jacocoTestReport {
   reports {
      xml.enabled true
      html.enabled false
   }
}

task cleanAll(type: Delete, dependsOn: [clean]) {
   group 'build'
   delete = ['.gradle']
}


task codeCoverageReport(type: JacocoReport) {
   // Gather execution data from all subprojects
   // (change this if you e.g. want to calculate unit test/integration test coverage separately)
   executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

   reports {
      xml.enabled true
      xml.destination file("${buildDir}/reports/jacoco")
      html.enabled false
      csv.enabled false
   }
}

wrapper {
   gradleVersion = '5.4.1'
}
